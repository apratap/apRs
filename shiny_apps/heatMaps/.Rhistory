require(synapseClient)
sessionInfo
sessionInfo()
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
install.packages(package, repos = allRepos, ...)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
library(synapseClient)
sessionInfo()
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
library(synapseClient)
sessionInfo()
install.packages(package, repos = allRepos, ...)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
library(synapseClient)
sessionInfo()
synapseLogin()
library(synapseClient)
library("gplots")
require(Heatplus)
#login to synapse
synapseLogin('apratap@sagebase.org','bifvit')
#get the gene norm counts from synapse
syn_geneNormCounts <- synGet('syn1968267')
#read in the file
geneNormCounts <- read.table(syn_geneNormCounts@filePath,header=T,sep='\t')
dim(geneNormCounts)
head(geneNormCounts,n=10)
# get only the normalized gene counts
# eliminate the first 3 cols to get rid of the annotation
m <- as.matrix(geneNormCounts[4:ncol(geneNormCounts)])
#change the data type to integer
m <- apply(m,2,as.numeric)
# so any gene with SD < .2 across the samples will be dropped
drop_genes <- which(apply(m,1,sd) < .2)
m <-  m[-drop_genes,]
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
heatmap(mat.scaled)
heatmap(mat.scaled)
c <- cor(t(mat.scaled),method="spearman")
dist.corr <- as.dist(1-c)
clust.agg.complete <- hclust(dist.corr,method="complete")
plot(as.dendrogram(clust.agg.complete), edgePar=list(col=2, lwd=2), horiz=T,xlab="+ hang = -1")
myheatcol <- greenred(75)
heatmap.2(  mat.scaled
,Rowv = as.dendrogram(clust.agg.complete)
,Colv = FALSE
,col=myheatcol
,key=TRUE
,keysize=1
,density.info="none"
,trace = "none"
,labRow = ""
,scale = c("none")
)
drop_genes <- which(apply(m,1,sd) < 1)
m <-  m[-drop_genes,]
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
c <- cor(t(mat.scaled),method="spearman")
dist.corr <- as.dist(1-c)
clust.agg.complete <- hclust(dist.corr,method="complete")
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
plot(reg2)
drop_genes <- which(apply(m,1,sd) < 5)
m <-  m[-drop_genes,]
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
drop_genes <- which(apply(m,1,sd) < 10)
m <-  m[-drop_genes,]
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
c <- cor(t(mat.scaled),method="spearman")
dist.corr <- as.dist(1-c)
clust.agg.complete <- hclust(dist.corr,method="complete")
plot(as.dendrogram(clust.agg.complete), edgePar=list(col=2, lwd=2), horiz=T,xlab="+ hang = -1")
dim(m)
drop_genes <- which(apply(m,1,sd) < 50)
m <-  m[-drop_genes,]
dim(m)
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
c <- cor(t(mat.scaled),method="spearman")
dist.corr <- as.dist(1-c)
clust.agg.complete <- hclust(dist.corr,method="complete")
plot(as.dendrogram(clust.agg.complete), edgePar=list(col=2, lwd=2), horiz=T,xlab="+ hang = -1")
m <- as.matrix(geneNormCounts[4:ncol(geneNormCounts)])
#change the data type to integer
m <- apply(m,2,as.numeric)
#removing those genes which dont vary much across the samples
# so any gene with SD < .2 across the samples will be dropped
drop_genes <- which(apply(m,1,sd) < 50)
m <-  m[-drop_genes,]
dim(m)
#NO more need to do this as the above step will take care of removing genes with SD = 0 or all with expr value = 0
#ignore those rows which have all the values == 0
# these are genes with no expression
#genes_with_no_expression_in_any_sample <- apply(m,1, function(x) all(x==0))
#m <- m[!(genes_with_no_expression_in_any_sample),]
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),5000,replace = F)
sampled_m <- m[sampled_rows,]
sampled_rows <- sample(seq(1:nrow(m)),1000,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
c <- cor(t(mat.scaled),method="spearman")
dist.corr <- as.dist(1-c)
clust.agg.complete <- hclust(dist.corr,method="complete")
plot(as.dendrogram(clust.agg.complete), edgePar=list(col=2, lwd=2), horiz=T,xlab="+ hang = -1")
myheatcol <- greenred(75)
heatmap.2(  mat.scaled
,Rowv = as.dendrogram(clust.agg.complete)
,Colv = FALSE
,col=myheatcol
,key=TRUE
,keysize=1
,density.info="none"
,trace = "none"
,labRow = ""
,scale = c("none")
)
heatmap(mat.scaled)
heatmap(mat.scaled)
reg1 <- regHeatmap(mat.scaled)
plot(reg1)
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
?regHeatmap
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
install.packages(package, repos = allRepos, ...)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
install.packages(package, repos = allRepos, ...)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
library(synapseClient)
path.expand('~/.synapseConfig')
file.exists('~/.synapseConfig')
synapseClient:::ConfigParser()
synapseLogin('apratap@sagebase.org','bifvit')
myproject = Project(name='test_apratap1')
myproject = synStore(myproject)
myproject
pid <- propertyValue(myproject,"id")
pid
fh <- synapseClient:::chunkedUploadFile("~/temp/test.txt")
file <- synGet('syn2176182')
wikiPage <- WikiPage(owner=myproject,
title = "test_wiki",
markdown = "*TEST*",
fileHandles = list(fh$id))
wikiPage <- synStore(wikiPage)
wikiPage2 <- synGetWiki(myproject)
wikiPage2
evaluation<-Evaluation(name="test evaluation 2", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
eid<-propertyValue(evaluation, fh,"id")
?submit
submit(eid,file)
eid<-propertyValue(evaluation, fh,"id")
evaluation<-Evaluation(name="test evaluation 2", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
eid<-propertyValue(evaluation,"id")
submit(eid,file)
evaluation<-Evaluation(name="test evaluation 3", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
eid<-propertyValue(evaluation,"id")
submit(eid,file)
sessionInfo()
?submit
submit(eid,file)
library(synapseClient)
synapseLogin('apratap@sagebase.org','bifvit')
myproject = Project(name='test_apratap1')
myproject = synStore(myproject)
myproject
pid <- propertyValue(myproject,"id")
pid
evaluation<-Evaluation(name="test evaluation 3", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
eid<-propertyValue(evaluation,"id")
submit(eid,file)
myproject = Project(name='test_apratap1')
myproject = synStore(myproject)
path.expand('~/.synapseConfig')
file.exists('~/.synapseConfig')
synapseClient:::ConfigParser()
path.expand('~/.synapseConfig')
path.expand('~/.synapseConfig')
myproject = Project(name='test_apratap1')
myproject = synStore(myproject)
myproject
pid <- propertyValue(myproject,"id")
pid
file <- synGet('syn2176182')
file <- synGet('syn2176182')
file <- synGet('syn2176182')
evaluation<-Evaluation(name="test evaluation 3", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
evaluation<-Evaluation(name="test evaluation 1", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
evaluation<-Evaluation(name="test evaluation 5", status="PLANNED", contentSource=pid)
evaluation<-Evaluation(name="test evaluation 5", status="PLANNED", contentSource=pid)
evaluation<-synStore(evaluation)
eid<-propertyValue(evaluation,"id")
submit(eid,file)
traceback()
sessionInfo()
submit
submit(eid,file)
remove.packages("synapseClient")
remove.packages("synapseClient",lib)
remove.packages("synapseClient")
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient",stack="staging")
install.packages(package, repos = allRepos, ...)
######################
#get the normalized gene counts from synapse
######################
#load the modules
library(synapseClient)
library("gplots")
require(Heatplus)
#login to synapse
synapseLogin()
#get the gene norm counts from synapse
syn_geneNormCounts <- synGet('syn1968267')
#read in the file
geneNormCounts <- read.table(syn_geneNormCounts@filePath,header=T,sep='\t')
dim(geneNormCounts)
head(geneNormCounts,n=10)
# get only the normalized gene counts
# eliminate the first 3 cols to get rid of the annotation
m <- as.matrix(geneNormCounts[4:ncol(geneNormCounts)])
#change the data type to integer
m <- apply(m,2,as.numeric)
#removing those genes which dont vary much across the samples
# so any gene with SD < .2 across the samples will be dropped
drop_genes <- which(apply(m,1,sd) < .2)
m <-  m[-drop_genes,]
dim(m)
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),500,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
#custom functions for heatmap plus
corrdist <- function(x) as.dist( 1 - cor(t(x),method="spearman"))
hclust.avl = function(x) hclust(x, method="average")
reg3 <- regHeatmap(mat.scaled,legend=2,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
reg3 <- regHeatmap(mat.scaled,
legend=2,
col=heat.colors,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
#v3
reg3 <- regHeatmap(mat.scaled,
legend=2,
col=heat.colors,
breaks = -3:3,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
reg3 <- regHeatmap(mat.scaled,
legend=2,
breaks = -3:3,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
?regHeatmap
#v3
reg3 <- regHeatmap(mat.scaled,
legend=2,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
MSIGDB<-synGet("syn1681370",load = TRUE)
MSIGDB$objects
MSIGDB$objects$C1.ALL
MSIGDB$objects$C2.CP.KEGG
MSIGDB$objects$C2.CP.KEGG$KEGG_HUNTINGTONS_DISEASE
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),500,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
#custom functions for heatmap plus
corrdist <- function(x) as.dist( 1 - cor(t(x),method="spearman"))
hclust.avl = function(x) hclust(x, method="average")
#v1
reg1 <- regHeatmap(mat.scaled)
plot(reg1)
#v1
reg1 <- regHeatmap(mat.scaled)
plot(reg1)
#v2
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
reg2 <- regHeatmap(mat.scaled,legend=2,col=heat.colors,breaks=-3:3)
plot(reg2)
#v3
reg3 <- regHeatmap(mat.scaled,
legend=2,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
#sampling for testing
sampled_rows <- sample(seq(1:nrow(m)),200,replace = F)
sampled_m <- m[sampled_rows,]
#scaling genes across experiments
mat.scaled <- t(scale(t(sampled_m)))
#custom functions for heatmap plus
corrdist <- function(x) as.dist( 1 - cor(t(x),method="spearman"))
hclust.avl = function(x) hclust(x, method="average")
#v3
reg3 <- regHeatmap(mat.scaled,
legend=2,
dendrogram = list(clustfun=hclust.avl,
distfun = corrdist))
plot(reg3)
View(geneNormCounts)
library(shiny)
library("synapseClient")
# #login to synapse
synapseLogin()
#get the MsigDB object
MSIGDB<-synGet("syn2227979")
load(MSIGDB@filePath) #available as MSigDB R object
#get the PCBC samples gene normalized counts
syn_geneNormCounts <- synGet('syn1968267')
#read in the file
geneNormCounts <- read.table(syn_geneNormCounts@filePath,header=T,sep='\t')
dim(geneNormCounts)
#get the metadata from the synapse for PCBC samples
METADATA_ID <- 'syn2024470'
query <- sprintf('select * from entity where parentId=="%s"', METADATA_ID)
metadata <- synQuery(query)
cols_to_be_deleted = c('entity.benefactorId', 'entity.concreteType', 'entity.createdByPrincipalId',
'entity.createdOn', 'entity.createdByPrincipalId', 'entity.id',
'entity.modifiedOn', 'entity.modifiedByPrincipalId', 'entity.noteType',
'entity.versionLabel', 'entity.versionComment', 'entity.versionNumber',
'entity.parentId', 'entity.description')
#delete the unwanted cols
metadata <- metadata[,!names(metadata) %in% cols_to_be_deleted]
#remove the prefix 'entity.' from the df col names
names(metadata) <- gsub('entity.','',names(metadata))
sex
sex <- unique(metadata$donorsex.cell.lines)
sex <- sex[sex != "None"]
sex
setwd("~/dev/R_scripts/shiny_apps/heatMaps")
#load the modules
library("shiny")
runApp()
runApp()
runApp()
runApp()
metadata$disease
metadata$devorigin
metadata$grouplevel1differentiationstate
unique(metadata$grouplevel1differentiationstate)
unique(metadata$grouplevel1differentiationstate)
unique(metadata$grouplevel2differentiationstate)
unique(metadata$grouplevel1differentiationstate)
metadata$disease
apply(metadata,2,unique)
runApp()
